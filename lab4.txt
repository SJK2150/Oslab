#include <stdio.h>
#include <unistd.h>
#include <sys/types.h>
#include <stdlib.h>
#include <string.h>
#include <ctype.h>
#include <sys/wait.h>

// Exercise 1
int exercise1() {
    pid_t p1, p2, p3, p4, p5;

    printf("P1: PID = %d, PPID = %d\n", getpid(), getppid());

    p1 = fork();
    if (p1 == 0) {
        // Child process P2
        printf("P2: PID = %d, PPID = %d\n", getpid(), getppid());

        p2 = fork();
        if (p2 == 0) {
            // Child of P2 -> P4
            printf("P4: PID = %d, PPID = %d\n", getpid(), getppid());
            exit(0);
        }
        wait(NULL);
        exit(0);
    } else {
        p3 = fork();
        if (p3 == 0) {
            // Child process P3
            printf("P3: PID = %d, PPID = %d\n", getpid(), getppid());

            p4 = fork();
            if (p4 == 0) {
                // Child of P3 -> P5
                printf("P5: PID = %d, PPID = %d\n", getpid(), getppid());
                exit(0);
            }
            wait(NULL);
            exit(0);
        }
    }
    wait(NULL);
    wait(NULL);
    return 0;
}

// Exercise 2
int exercise2() {
    pid_t p1, p2, p3, p4, p5, p6;

    printf("P1: PID = %d, PPID = %d\n", getpid(), getppid());

    p1 = fork();
    if (p1 == 0) {
        // Child process P2
        printf("P2: PID = %d, PPID = %d\n", getpid(), getppid());

        p2 = fork();
        if (p2 == 0) {
            // Child of P2 -> P6
            printf("P6: PID = %d, PPID = %d\n", getpid(), getppid());
            exit(0);
        }
        p5 = fork();
        if (p5 == 0) {
            // Another child of P2 -> P5
            printf("P5: PID = %d, PPID = %d\n", getpid(), getppid());
            exit(0);
        }
        wait(NULL);
        wait(NULL);
        exit(0);
    } else {
        p3 = fork();
        if (p3 == 0) {
            // Child process P3
            printf("P3: PID = %d, PPID = %d\n", getpid(), getppid());

            p4 = fork();
            if (p4 == 0) {
                // Child of P3 -> P4
                printf("P4: PID = %d, PPID = %d\n", getpid(), getppid());
                exit(0);
            }
            wait(NULL);
            exit(0);
        }
    }
    wait(NULL);
    wait(NULL);
    return 0;
}

// Exercise 3
int exercise3() {
    int fd[2];
    pipe(fd);
    pid_t pid = fork();

    if (pid == 0) {
        // Child process
        close(fd[0]);
        char str[100];
        printf("Enter a string: ");
        fgets(str, sizeof(str), stdin);
        write(fd[1], str, strlen(str) + 1);
        close(fd[1]);
    } else {
        // Parent process
        close(fd[1]);
        char buffer[100];
        read(fd[0], buffer, sizeof(buffer));
        close(fd[0]);

        int vowel_count = 0;
        for (int i = 0; buffer[i] != '\0'; i++) {
            if (strchr("AEIOUaeiou", buffer[i])) {
                vowel_count++;
            }
        }
        printf("Total number of vowels: %d\n", vowel_count);
        wait(NULL);
    }
    return 0;
}

// Exercise 4
int is_prime(int n) {
    if (n < 2) return 0;
    for (int i = 2; i * i <= n; i++) {
        if (n % i == 0) return 0;
    }
    return 1;
}

int exercise4() {
    int pipe1[2], pipe2[2];
    pipe(pipe1);
    pipe(pipe2);
    pid_t pid1 = fork();

    if (pid1 == 0) {
        // Child process
        close(pipe1[0]);
        int N, num;
        printf("Enter number of integers: ");
        scanf("%d", &N);

        printf("Enter %d integers: ", N);
        for (int i = 0; i < N; i++) {
            scanf("%d", &num);
            write(pipe1[1], &num, sizeof(int));
        }
        close(pipe1[1]);
    } else {
        pid_t pid2 = fork();
        if (pid2 == 0) {
            // Grandchild process
            close(pipe2[1]);
            int odd, sum = 0;
            while (read(pipe2[0], &odd, sizeof(int)) > 0) {
                sum += odd;
            }
            printf("Sum of odd numbers: %d\n", sum);
            close(pipe2[0]);
        } else {
            // Parent process
            close(pipe1[1]);
            close(pipe2[0]);

            int num;
            while (read(pipe1[0], &num, sizeof(int)) > 0) {
                if (is_prime(num)) {
                    printf("Prime number: %d\n", num);
                }
                if (num % 2 != 0) {
                    write(pipe2[1], &num, sizeof(int));
                }
            }
            close(pipe1[0]);
            close(pipe2[1]);

            wait(NULL);
            wait(NULL);
        }
    }
    return 0;
}

int main() {
    exercise1();
    exercise2();
    exercise3();
    exercise4();
    return 0;
}
